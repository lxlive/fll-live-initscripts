#!/bin/sh -e
#
# put attached devices in interfaces
# bring them up if nothing has come up yet
#
# Copyright (C) 2012 Niall Walsh <niallwalsh@users.berlios.de>
#
# fll.net.agent is based on udev's net.agent
# Copyright (C) 2003,2004 Greg Kroah-Hartman <greg@kroah.com>
# Copyright (C) 2004,2005 Kay Sievers <kay.sievers@vrfy.org>
# udev is licensed under the GNU GPL version 2 or newer.

[ -e /run/fll/netup ] || exit 0

grep -q nonetwork /proc/cmdline && exit 0

. /lib/udev/hotplug.functions

if [ -e /run/fll/ifup ]; then
	debug_mesg "Not ifup-ing interface $INTERFACE as we have brought one up already"
	exit 0
fi

if [ -z "$INTERFACE" ]; then
	mesg "Bad fll.net.agent invocation: \$INTERFACE is not set"
	exit 1
fi

check_program() {
	[ -x $1 ] && return 0

	mesg "ERROR: $1 not found. You need to install the ifupdown package."
	mesg "fll.net.agent $ACTION event for $INTERFACE not handled."
	exit 1
}

wait_for_interface() {
	local interface=$1

	while :; do
		local state="$(cat /sys/class/net/$interface/operstate 2>/dev/null || true)"
		if [ "$state" != down ]; then
			return 0
		fi
		sleep 1
	done
}

net_ifup() {
	check_program /sbin/ifup

	if ps -C ifup ho args | grep -q "$INTERFACE"; then
		debug_mesg "Already ifup-ing interface $INTERFACE"
		exit 0
	fi

	if [ ! -d /run/fll ]; then
		mkdir /run/fll
	fi

	if [ ! -e /etc/network/interfaces ]; then
		printf "auto lo\niface lo inet loopback\n" > /etc/network/interfaces
	fi

	# don't create anything if we have "iface $iface" or "mapping $iface"
	if ! grep -q -e 'iface[[:space::]\+$INTERFACE[[:space::]\+' \
	             -e 'mapping[[:space::]\+$INTERFACE[[:space:]]*$' \
			/etc/network/interfaces; then
		printf "fll\n" > "/run/fll/ifup.${INTERFACE}"
		printf "\niface $INTERFACE inet dhcp\n" >> /etc/network/interfaces
	else
		touch "/run/fll/ifup.${INTERFACE}"
	fi

	wait_for_interface lo
	if [ -d /run/systemd/system ]; then
		systemctl start ifup@${INTERFACE}.service
	fi
	ifup $INTERFACE
}

net_ifdown() {
	check_program /sbin/ifdown

	if ps -C ifdown ho args | grep -q $INTERFACE; then
		debug_mesg "Already ifdown-ing interface $INTERFACE"
		exit 0
	fi

	exec ifdown $INTERFACE
}

do_everything() {
	case "$ACTION" in
		add)
		# these interfaces generate hotplug events *after* they are brought up
		case $INTERFACE in
			ppp*|ippp*|isdn*|plip*|lo|irda*|ipsec*)
			exit 0
			;;
		esac

		# ignore wireless interfaces
		if [ -d "/sys/class/net/$INTERFACE/phy80211" ] || \
		   ( [ -x /sbin/iwgetid ] && \
		     /sbin/iwgetid --protocol $INTERFACE | grep -q "^$INTERFACE" ); then
			exit 0
		fi

		net_ifup
		;;
	esac
}

# When udev_log="debug" stdout and stderr are pipes connected to udevd.
# They need to be closed or udevd will wait for this process which will
# deadlock with udevsettle until the timeout.
do_everything > /dev/null 2> /dev/null &

exit 0

